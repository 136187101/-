1 Linux下Git和GitHub环境的搭建

第一步： 安装Git，使用命令 “sudo apt-get install git”

第二步： 创建GitHub帐号

第三步： 生成ssh key，使用命令 “ssh-keygen -t rsa -C "your_email@youremail.com"”，your_email是你的email
一路回车

cat ~/.ssh/id_rsa.pub 
查看KEY
复制key

第四步
在github里 your profile 进入你的项目
点击Settings 进入 Deploy keys
点击Add a deploy key  
title随便填，粘贴key。



第五步： 测试ssh key是否成功，使用命令“ssh -T git@github.com”，如果出现You’ve successfully authenticated, but GitHub does not provide shell access 。这就表示已成功连上github。

第六步： 配置Git的配置文件，username和email

git config --global user.name "your name" //配置用户名

git config --global user.email "your email" //配置email

2 利用Git从本地上传到GitHub

第一步： 进入要所要上传文件的目录输入命令 “git init”

第二步： 创建一个本地仓库origin，使用命令 “git remote add origin git@github.com:yourName/yourRepo.git”
youname是你的GitHub的用户名，yourRepo是你要上传到GitHub的仓库

第三步： 比如你要添加一个文件xxx到本地仓库，使用命令 “git add xxx”，可以使用“git add .”自动判断添加哪些文件

然后把这个添加提交到本地的仓库，使用命令 ”git commit -m ”说明这次的提交“ “

最后把本地仓库origin提交到远程的GitHub仓库，使用命令 ”git push origin master“

 

3 从GitHub克隆项目到本地

第一步： 到GitHub的某个仓库，然后复制右边的有个“HTTPS clone url”

第二步： 回到要存放的目录下，使用命令 "git clone https://github.com/chenguolin/scrapy.git"，红色的url只是一个例子

第三步： 如果本地的版本不是最新的，可以使用命令 “git fetch origin”，origin是本地仓库

第四步： 把更新的内容合并到本地分支，可以使用命令 “git merge origin/master”

 

如果你不想手动去合并，那么你可以使用： git pull <本地仓库> master // 这个命令可以拉去最新版本并自动合并

 如果希望保留生产服务器上所做的改动,仅仅并入新配置项, 处理方法如下:


git stash
git pull
git stash pop
然后可以使用git diff -w +文件名 来确认代码自动合并的情况.


反过来,如果希望用代码库中的文件完全覆盖本地工作版本. 方法如下:


git reset --hard
git pull
其中git reset是针对版本,如果想针对文件回退本地修改,使用




untracked working tree file
参考：http://blog.csdn.net/sheismylife/article/details/7204345
编写脚本自动编译并部署时的注意


如果想在C2上编写脚本自动从S1上获取最新代码时，要注意：


1.首先之前产生的公钥不能设密码，否则每次git pull的时候都会要求输入密码。


2.不要将项目中的编译中间文件提交到S1上，比如CMake工程里面的build目录的文件，Maven工程里面的target目录里面的文件。否则下次在C2等客户端用git pull会报类似于这样的错误：


error: Untracked working tree file 'public/images/icon.gif' would be overwritten by merge.
需要执行下面的命令才能修复：


git reset --hard HEAD    
git clean -f -d    
git pull  
 

4 GitHub的分支管理

创建

1 创建一个本地分支： git branch <新分支名字>

2 将本地分支同步到GitHub上面： git push <本地仓库名> <新分支名>

3 切换到新建立的分支： git checkout <新分支名>

4 为你的分支加入一个新的远程端： git remote add <远程端名字> <地址>

5 查看当前仓库有几个分支: git branch

删除

1 从本地删除一个分支： git branch -d <分支名称>

2 同步到GitHub上面删除这个分支： git push <本地仓库名> :<GitHub端分支>

 

5 常见错误

1 如果出现报错为ERROR: Repository not found.fatal: The remote end hung up unexpectedly则代表你的 origin 的url 链接有误，可能是创建错误，也可能是这个 git@github.com:xxx/new-project.git url 指定不正确。重新创建。